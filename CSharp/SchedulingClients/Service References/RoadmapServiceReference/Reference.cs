//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace SchedulingClients.RoadmapServiceReference {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="NodeData", Namespace="http://schemas.datacontract.org/2004/07/SchedulingServices")]
    [System.SerializableAttribute()]
    public partial class NodeData : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string AliasField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double HeadingRadField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int MapItemIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private SchedulingClients.RoadmapServiceReference.ServiceType[] ServicesField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double XField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double YField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Alias {
            get {
                return this.AliasField;
            }
            set {
                if ((object.ReferenceEquals(this.AliasField, value) != true)) {
                    this.AliasField = value;
                    this.RaisePropertyChanged("Alias");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double HeadingRad {
            get {
                return this.HeadingRadField;
            }
            set {
                if ((this.HeadingRadField.Equals(value) != true)) {
                    this.HeadingRadField = value;
                    this.RaisePropertyChanged("HeadingRad");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int MapItemId {
            get {
                return this.MapItemIdField;
            }
            set {
                if ((this.MapItemIdField.Equals(value) != true)) {
                    this.MapItemIdField = value;
                    this.RaisePropertyChanged("MapItemId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public SchedulingClients.RoadmapServiceReference.ServiceType[] Services {
            get {
                return this.ServicesField;
            }
            set {
                if ((object.ReferenceEquals(this.ServicesField, value) != true)) {
                    this.ServicesField = value;
                    this.RaisePropertyChanged("Services");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double X {
            get {
                return this.XField;
            }
            set {
                if ((this.XField.Equals(value) != true)) {
                    this.XField = value;
                    this.RaisePropertyChanged("X");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double Y {
            get {
                return this.YField;
            }
            set {
                if ((this.YField.Equals(value) != true)) {
                    this.YField = value;
                    this.RaisePropertyChanged("Y");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ServiceType", Namespace="http://schemas.datacontract.org/2004/07/Mapping.Roadmaps")]
    public enum ServiceType : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Charge = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Null = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Park = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Fault = 3,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Pick = 4,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Drop = 5,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="RoadmapServiceReference.IRoadmapService")]
    public interface IRoadmapService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRoadmapService/GetAllNodeData", ReplyAction="http://tempuri.org/IRoadmapService/GetAllNodeDataResponse")]
        SchedulingClients.RoadmapServiceReference.NodeData[] GetAllNodeData();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRoadmapService/GetAllNodeData", ReplyAction="http://tempuri.org/IRoadmapService/GetAllNodeDataResponse")]
        System.Threading.Tasks.Task<SchedulingClients.RoadmapServiceReference.NodeData[]> GetAllNodeDataAsync();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IRoadmapServiceChannel : SchedulingClients.RoadmapServiceReference.IRoadmapService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class RoadmapServiceClient : System.ServiceModel.ClientBase<SchedulingClients.RoadmapServiceReference.IRoadmapService>, SchedulingClients.RoadmapServiceReference.IRoadmapService {
        
        public RoadmapServiceClient() {
        }
        
        public RoadmapServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public RoadmapServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public RoadmapServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public RoadmapServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public SchedulingClients.RoadmapServiceReference.NodeData[] GetAllNodeData() {
            return base.Channel.GetAllNodeData();
        }
        
        public System.Threading.Tasks.Task<SchedulingClients.RoadmapServiceReference.NodeData[]> GetAllNodeDataAsync() {
            return base.Channel.GetAllNodeDataAsync();
        }
    }
}
